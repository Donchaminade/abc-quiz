'use client';
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { useEffect, useState, useRef } from 'react';
import Image from "next/image";
import { useRouter } from "next/navigation";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

function ParticlesBG() {
  const [particles, setParticles] = useState<any[]>([]);
  const [frame, setFrame] = useState(0);
  const requestRef = useRef<number>();

  useEffect(() => {
    const colors = [
      '#030580FF', '#43e97b', '#ffd600', '#ff4081', '#7c4dff', '#ff9100'
    ];
    // G√©n√®re les particules avec un point d'ancrage et un angle de d√©part
    const generated = Array.from({ length: 18 }).map((_, i) => {
      const anchorX = Math.random() * 100;
      const anchorY = Math.random() * 100;
      const radius = 8 + Math.random() * 24;
      const angle = Math.random() * Math.PI * 2;
      const speed = 0.2 + Math.random() * 0.3;
      return {
        id: i,
        anchorX,
        anchorY,
        radius,
        angle,
        speed,
        color: colors[Math.floor(Math.random() * colors.length)],
        size: 18 + Math.random() * 32,
        hue: Math.random() * 360,
      };
    });
    setParticles(generated);
  }, []);

  // Animation mol√©culaire : chaque particule tourne autour de son point d'ancrage
  useEffect(() => {
    if (particles.length === 0) return;
    let running = true;
    const animate = () => {
      setParticles((prev) => prev.map((p) => {
        const newAngle = p.angle + p.speed * 0.01;
        return {
          ...p,
          angle: newAngle,
          hue: (p.hue + 0.2) % 360,
        };
      }));
      setFrame(f => f + 1);
      if (running) requestRef.current = requestAnimationFrame(animate);
    };
    requestRef.current = requestAnimationFrame(animate);
    return () => { running = false; if (requestRef.current) cancelAnimationFrame(requestRef.current); };
  }, [particles.length]);

  // Calcule la position r√©elle de chaque particule
  const positions = particles.map(p => ({
    ...p,
    left: p.anchorX + Math.cos(p.angle) * p.radius,
    top: p.anchorY + Math.sin(p.angle) * p.radius,
  }));

  // G√©n√®re les liens entre particules proches (distance < 18% viewport)
  const links = [];
  for (let i = 0; i < positions.length; i++) {
    for (let j = i + 1; j < positions.length; j++) {
      const dx = positions[i].left - positions[j].left;
      const dy = positions[i].top - positions[j].top;
      const dist = Math.sqrt(dx * dx + dy * dy);
      if (dist < 18) {
        links.push({
          x1: positions[i].left,
          y1: positions[i].top,
          x2: positions[j].left,
          y2: positions[j].top,
          color: positions[i].color,
        });
      }
    }
  }

  return (
    <div className="particles-bg">
      <svg width="100vw" height="100vh" style={{ position: 'absolute', top: 0, left: 0, width: '100vw', height: '100vh', zIndex: 1, pointerEvents: 'none' }}>
        {links.map((l, i) => (
          <line key={i} x1={`${l.x1}%`} y1={`${l.y1}%`} x2={`${l.x2}%`} y2={`${l.y2}%`} stroke={l.color} strokeWidth={2} opacity={0.18} />
        ))}
      </svg>
      {positions.map((p) => (
        <div
          key={p.id}
          className="particle"
          style={{
            width: p.size,
            height: p.size,
            left: `${p.left}%`,
            top: `${p.top}%`,
            background: `hsl(${p.hue}, 80%, 55%)`,
            filter: 'brightness(1.1)',
            transition: 'background 0.5s',
          }}
        />
      ))}
    </div>
  );
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState('light');
  const [fontSize, setFontSize] = useState('normal');

  useEffect(() => {
    const saved = localStorage.getItem('abc_quiz_theme');
    if (saved) setTheme(saved);
    document.body.setAttribute('data-theme', saved || 'light');
    const savedFont = localStorage.getItem('abc_quiz_fontsize');
    if (savedFont) setFontSize(savedFont);
    document.body.style.setProperty('--font-size-base', fontSizeToPx(savedFont || 'normal'));
  }, []);

  const fontSizeToPx = (size: string) => {
    switch (size) {
      case 'small': return '15px';
      case 'large': return '20px';
      case 'xlarge': return '24px';
      default: return '17px';
    }
  };

  const handleFontSize = (size: string) => {
    setFontSize(size);
    localStorage.setItem('abc_quiz_fontsize', size);
    document.body.style.setProperty('--font-size-base', fontSizeToPx(size));
  };

  const toggleTheme = () => {
    const next = theme === 'light' ? 'dark' : 'light';
    setTheme(next);
    localStorage.setItem('abc_quiz_theme', next);
    document.body.setAttribute('data-theme', next);
  };

  return (
    <html lang="fr">
      <body>
        <ParticlesBG />
        <nav style={{ position: 'fixed', top: 0, left: 0, width: '100vw', height: 64, background: theme === 'light' ? '#fff' : '#030580FF', boxShadow: '0 2px 12px #0001', display: 'flex', alignItems: 'center', justifyContent: 'space-between', padding: '0 32px', zIndex: 3000 }} aria-label="Barre de navigation principale">
          <button onClick={() => window.location.href = '/'} style={{ background: 'none', border: 'none', cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }} aria-label="Accueil ABC Quiz">
            <Image src="/logo.png" alt="Logo ABC Quiz" width={40} height={40} />
            <span style={{ color: theme === 'light' ? '#030580FF' : '#fff', fontWeight: 700, fontSize: 22, letterSpacing: 1 }}>ABC Quiz</span>
          </button>
          <button onClick={() => { localStorage.clear(); window.location.href = '/'; }} aria-label="Recommencer le quiz" style={{ background: theme === 'light' ? '#030580FF' : '#fff', color: theme === 'light' ? '#fff' : '#030580FF', border: 'none', borderRadius: 8, padding: '8px 18px', fontWeight: 600, fontSize: 18, cursor: 'pointer', boxShadow: '0 2px 8px #0001', transition: 'all 0.2s' }}>‚Üª Recommencer</button>
        </nav>
        <div style={{ height: 64 }} />
        <div style={{ position: 'fixed', bottom: 18, left: 18, zIndex: 2000, display: 'flex', gap: 12, alignItems: 'center', background: 'rgba(255,255,255,0.85)', borderRadius: 12, boxShadow: '0 2px 8px #0001', padding: '6px 14px' }}>
          <button onClick={toggleTheme} aria-label={theme === 'light' ? 'Activer le mode sombre' : 'Activer le mode clair'} style={{ background: 'none', border: 'none', cursor: 'pointer', fontSize: 28, color: theme === 'light' ? '#030580FF' : '#fff', transition: 'color 0.2s' }}>
            {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
          </button>
          <select aria-label="Taille de police" value={fontSize} onChange={e => handleFontSize(e.target.value)} style={{ borderRadius: 8, border: '1px solid #030580FF', padding: '4px 8px', fontSize: 16, color: theme === 'light' ? '#030580FF' : '#fff', background: theme === 'light' ? '#fff' : '#181a2a' }}>
            <option value="small">Petit</option>
            <option value="normal">Normal</option>
            <option value="large">Grand</option>
            <option value="xlarge">Tr√®s grand</option>
          </select>
        </div>
        {children}
      </body>
    </html>
  );
}
